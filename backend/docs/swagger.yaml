basePath: /api/v1
definitions:
  controllers.Doctor:
    properties:
      degree:
        type: integer
      department:
        type: integer
      email:
        type: string
      name:
        type: string
      nametitle:
        type: integer
      password:
        type: string
      tel:
        type: string
    type: object
  ent.Degree:
    properties:
      Degree:
        description: Degree holds the value of the "Degree" field.
        type: string
      edges:
        $ref: '#/definitions/ent.DegreeEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the DegreeQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.DegreeEdges:
    properties:
      doctor:
        description: Doctor holds the value of the doctor edge.
        items:
          $ref: '#/definitions/ent.Doctor'
        type: array
    type: object
  ent.Department:
    properties:
      Department:
        description: Department holds the value of the "Department" field.
        type: string
      edges:
        $ref: '#/definitions/ent.DepartmentEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the DepartmentQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.DepartmentEdges:
    properties:
      doctor:
        description: Doctor holds the value of the doctor edge.
        items:
          $ref: '#/definitions/ent.Doctor'
        type: array
    type: object
  ent.Doctor:
    properties:
      Email:
        description: Email holds the value of the "Email" field.
        type: string
      Name:
        description: Name holds the value of the "Name" field.
        type: string
      Password:
        description: Password holds the value of the "Password" field.
        type: string
      Tel:
        description: Tel holds the value of the "Tel" field.
        type: string
      edges:
        $ref: '#/definitions/ent.DoctorEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the DoctorQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.DoctorEdges:
    properties:
      degree:
        $ref: '#/definitions/ent.Degree'
        description: Degree holds the value of the degree edge.
        type: object
      department:
        $ref: '#/definitions/ent.Department'
        description: Department holds the value of the department edge.
        type: object
      nametitle:
        $ref: '#/definitions/ent.Nametitle'
        description: Nametitle holds the value of the nametitle edge.
        type: object
    type: object
  ent.Nametitle:
    properties:
      NameTitle:
        description: NameTitle holds the value of the "NameTitle" field.
        type: string
      edges:
        $ref: '#/definitions/ent.NametitleEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the NametitleQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.NametitleEdges:
    properties:
      doctor:
        description: Doctor holds the value of the doctor edge.
        items:
          $ref: '#/definitions/ent.Doctor'
        type: array
    type: object
  gin.H:
    additionalProperties: true
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server for SUT SE 2563
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: SUT SA Example API Doctor
  version: "1.0"
paths:
  /degrees:
    get:
      description: list degree entities
      operationId: list-degree
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Degree'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List degree entities
    post:
      consumes:
      - application/json
      description: Create degree
      operationId: create-degree
      parameters:
      - description: Degree entity
        in: body
        name: degree
        required: true
        schema:
          $ref: '#/definitions/ent.Degree'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Degree'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create degree
  /degrees/{id}:
    get:
      description: get degree by ID
      operationId: get-degree
      parameters:
      - description: Degree ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Degree'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a degree entity by ID
  /departments:
    get:
      description: list department entities
      operationId: list-department
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Department'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List department entities
    post:
      consumes:
      - application/json
      description: Create department
      operationId: create-department
      parameters:
      - description: Department entity
        in: body
        name: department
        required: true
        schema:
          $ref: '#/definitions/ent.Department'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Department'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create department
  /departments/{id}:
    delete:
      description: get department by ID
      operationId: delete-department
      parameters:
      - description: Department ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a department entity by ID
    get:
      description: get doctor by ID
      operationId: get-doctor
      parameters:
      - description: Doctor ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Doctor'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a doctor entity by ID
    put:
      consumes:
      - application/json
      description: update department by ID
      operationId: update-department
      parameters:
      - description: Department ID
        in: path
        name: id
        required: true
        type: integer
      - description: Department entity
        in: body
        name: department
        required: true
        schema:
          $ref: '#/definitions/ent.Department'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Department'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a department entity by ID
  /doctors:
    get:
      description: list doctor entities
      operationId: list-doctor
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Doctor'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List doctor entities
    post:
      consumes:
      - application/json
      description: Create doctor
      operationId: create-doctor
      parameters:
      - description: Doctor entity
        in: body
        name: doctor
        required: true
        schema:
          $ref: '#/definitions/controllers.Doctor'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Doctor'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create doctor
  /doctors/{id}:
    delete:
      description: get doctor by ID
      operationId: delete-doctor
      parameters:
      - description: Doctor ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a doctor entity by ID
    put:
      consumes:
      - application/json
      description: update doctor by ID
      operationId: update-doctor
      parameters:
      - description: Doctor ID
        in: path
        name: id
        required: true
        type: integer
      - description: Doctor entity
        in: body
        name: doctor
        required: true
        schema:
          $ref: '#/definitions/ent.Doctor'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Doctor'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a doctor entity by ID
  /nametitles:
    get:
      description: list nametitle entities
      operationId: list-nametitle
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Nametitle'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List nametitle entities
    post:
      consumes:
      - application/json
      description: Create nametitle
      operationId: create-nametitle
      parameters:
      - description: Nametitle entity
        in: body
        name: nametitle
        required: true
        schema:
          $ref: '#/definitions/ent.Nametitle'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Nametitle'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create nametitle
  /nametitles/{id}:
    delete:
      description: get nametitle by ID
      operationId: delete-nametitle
      parameters:
      - description: Nametitle ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a nametitle entity by ID
    get:
      description: get nametitle by ID
      operationId: get-nametitle
      parameters:
      - description: NametitleID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Nametitle'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a nametitle entity by ID
    put:
      consumes:
      - application/json
      description: update nametitle by ID
      operationId: update-nametitle
      parameters:
      - description: Nametitle ID
        in: path
        name: id
        required: true
        type: integer
      - description: Nametitle entity
        in: body
        name: nametitle
        required: true
        schema:
          $ref: '#/definitions/ent.Nametitle'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Nametitle'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a nametitle entity by ID
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
  BasicAuth:
    type: basic
  OAuth2AccessCode:
    authorizationUrl: https://example.com/oauth/authorize
    flow: accessCode
    scopes:
      admin: ' Grants read and write access to administrative information'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Application:
    flow: application
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Implicit:
    authorizationUrl: https://example.com/oauth/authorize
    flow: implicit
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    type: oauth2
  OAuth2Password:
    flow: password
    scopes:
      admin: ' Grants read and write access to administrative information'
      read: ' Grants read access'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
swagger: "2.0"
