// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/pmn-kao/app/ent/migrate"

	"github.com/pmn-kao/app/ent/degree"
	"github.com/pmn-kao/app/ent/department"
	"github.com/pmn-kao/app/ent/doctor"
	"github.com/pmn-kao/app/ent/nametitle"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Degree is the client for interacting with the Degree builders.
	Degree *DegreeClient
	// Department is the client for interacting with the Department builders.
	Department *DepartmentClient
	// Doctor is the client for interacting with the Doctor builders.
	Doctor *DoctorClient
	// Nametitle is the client for interacting with the Nametitle builders.
	Nametitle *NametitleClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Degree = NewDegreeClient(c.config)
	c.Department = NewDepartmentClient(c.config)
	c.Doctor = NewDoctorClient(c.config)
	c.Nametitle = NewNametitleClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		Degree:     NewDegreeClient(cfg),
		Department: NewDepartmentClient(cfg),
		Doctor:     NewDoctorClient(cfg),
		Nametitle:  NewNametitleClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(*sql.Driver).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: &txDriver{tx: tx, drv: c.driver}, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:     cfg,
		Degree:     NewDegreeClient(cfg),
		Department: NewDepartmentClient(cfg),
		Doctor:     NewDoctorClient(cfg),
		Nametitle:  NewNametitleClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Degree.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Degree.Use(hooks...)
	c.Department.Use(hooks...)
	c.Doctor.Use(hooks...)
	c.Nametitle.Use(hooks...)
}

// DegreeClient is a client for the Degree schema.
type DegreeClient struct {
	config
}

// NewDegreeClient returns a client for the Degree from the given config.
func NewDegreeClient(c config) *DegreeClient {
	return &DegreeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `degree.Hooks(f(g(h())))`.
func (c *DegreeClient) Use(hooks ...Hook) {
	c.hooks.Degree = append(c.hooks.Degree, hooks...)
}

// Create returns a create builder for Degree.
func (c *DegreeClient) Create() *DegreeCreate {
	mutation := newDegreeMutation(c.config, OpCreate)
	return &DegreeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Degree.
func (c *DegreeClient) Update() *DegreeUpdate {
	mutation := newDegreeMutation(c.config, OpUpdate)
	return &DegreeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DegreeClient) UpdateOne(d *Degree) *DegreeUpdateOne {
	mutation := newDegreeMutation(c.config, OpUpdateOne, withDegree(d))
	return &DegreeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DegreeClient) UpdateOneID(id int) *DegreeUpdateOne {
	mutation := newDegreeMutation(c.config, OpUpdateOne, withDegreeID(id))
	return &DegreeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Degree.
func (c *DegreeClient) Delete() *DegreeDelete {
	mutation := newDegreeMutation(c.config, OpDelete)
	return &DegreeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DegreeClient) DeleteOne(d *Degree) *DegreeDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DegreeClient) DeleteOneID(id int) *DegreeDeleteOne {
	builder := c.Delete().Where(degree.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DegreeDeleteOne{builder}
}

// Create returns a query builder for Degree.
func (c *DegreeClient) Query() *DegreeQuery {
	return &DegreeQuery{config: c.config}
}

// Get returns a Degree entity by its id.
func (c *DegreeClient) Get(ctx context.Context, id int) (*Degree, error) {
	return c.Query().Where(degree.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DegreeClient) GetX(ctx context.Context, id int) *Degree {
	d, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return d
}

// QueryDoctor queries the doctor edge of a Degree.
func (c *DegreeClient) QueryDoctor(d *Degree) *DoctorQuery {
	query := &DoctorQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(degree.Table, degree.FieldID, id),
			sqlgraph.To(doctor.Table, doctor.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, degree.DoctorTable, degree.DoctorColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DegreeClient) Hooks() []Hook {
	return c.hooks.Degree
}

// DepartmentClient is a client for the Department schema.
type DepartmentClient struct {
	config
}

// NewDepartmentClient returns a client for the Department from the given config.
func NewDepartmentClient(c config) *DepartmentClient {
	return &DepartmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `department.Hooks(f(g(h())))`.
func (c *DepartmentClient) Use(hooks ...Hook) {
	c.hooks.Department = append(c.hooks.Department, hooks...)
}

// Create returns a create builder for Department.
func (c *DepartmentClient) Create() *DepartmentCreate {
	mutation := newDepartmentMutation(c.config, OpCreate)
	return &DepartmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Department.
func (c *DepartmentClient) Update() *DepartmentUpdate {
	mutation := newDepartmentMutation(c.config, OpUpdate)
	return &DepartmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DepartmentClient) UpdateOne(d *Department) *DepartmentUpdateOne {
	mutation := newDepartmentMutation(c.config, OpUpdateOne, withDepartment(d))
	return &DepartmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DepartmentClient) UpdateOneID(id int) *DepartmentUpdateOne {
	mutation := newDepartmentMutation(c.config, OpUpdateOne, withDepartmentID(id))
	return &DepartmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Department.
func (c *DepartmentClient) Delete() *DepartmentDelete {
	mutation := newDepartmentMutation(c.config, OpDelete)
	return &DepartmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DepartmentClient) DeleteOne(d *Department) *DepartmentDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DepartmentClient) DeleteOneID(id int) *DepartmentDeleteOne {
	builder := c.Delete().Where(department.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DepartmentDeleteOne{builder}
}

// Create returns a query builder for Department.
func (c *DepartmentClient) Query() *DepartmentQuery {
	return &DepartmentQuery{config: c.config}
}

// Get returns a Department entity by its id.
func (c *DepartmentClient) Get(ctx context.Context, id int) (*Department, error) {
	return c.Query().Where(department.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DepartmentClient) GetX(ctx context.Context, id int) *Department {
	d, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return d
}

// QueryDoctor queries the doctor edge of a Department.
func (c *DepartmentClient) QueryDoctor(d *Department) *DoctorQuery {
	query := &DoctorQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(department.Table, department.FieldID, id),
			sqlgraph.To(doctor.Table, doctor.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, department.DoctorTable, department.DoctorColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DepartmentClient) Hooks() []Hook {
	return c.hooks.Department
}

// DoctorClient is a client for the Doctor schema.
type DoctorClient struct {
	config
}

// NewDoctorClient returns a client for the Doctor from the given config.
func NewDoctorClient(c config) *DoctorClient {
	return &DoctorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `doctor.Hooks(f(g(h())))`.
func (c *DoctorClient) Use(hooks ...Hook) {
	c.hooks.Doctor = append(c.hooks.Doctor, hooks...)
}

// Create returns a create builder for Doctor.
func (c *DoctorClient) Create() *DoctorCreate {
	mutation := newDoctorMutation(c.config, OpCreate)
	return &DoctorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Doctor.
func (c *DoctorClient) Update() *DoctorUpdate {
	mutation := newDoctorMutation(c.config, OpUpdate)
	return &DoctorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DoctorClient) UpdateOne(d *Doctor) *DoctorUpdateOne {
	mutation := newDoctorMutation(c.config, OpUpdateOne, withDoctor(d))
	return &DoctorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DoctorClient) UpdateOneID(id int) *DoctorUpdateOne {
	mutation := newDoctorMutation(c.config, OpUpdateOne, withDoctorID(id))
	return &DoctorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Doctor.
func (c *DoctorClient) Delete() *DoctorDelete {
	mutation := newDoctorMutation(c.config, OpDelete)
	return &DoctorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DoctorClient) DeleteOne(d *Doctor) *DoctorDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DoctorClient) DeleteOneID(id int) *DoctorDeleteOne {
	builder := c.Delete().Where(doctor.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DoctorDeleteOne{builder}
}

// Create returns a query builder for Doctor.
func (c *DoctorClient) Query() *DoctorQuery {
	return &DoctorQuery{config: c.config}
}

// Get returns a Doctor entity by its id.
func (c *DoctorClient) Get(ctx context.Context, id int) (*Doctor, error) {
	return c.Query().Where(doctor.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DoctorClient) GetX(ctx context.Context, id int) *Doctor {
	d, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return d
}

// QueryDepartment queries the department edge of a Doctor.
func (c *DoctorClient) QueryDepartment(d *Doctor) *DepartmentQuery {
	query := &DepartmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(doctor.Table, doctor.FieldID, id),
			sqlgraph.To(department.Table, department.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, doctor.DepartmentTable, doctor.DepartmentColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDegree queries the degree edge of a Doctor.
func (c *DoctorClient) QueryDegree(d *Doctor) *DegreeQuery {
	query := &DegreeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(doctor.Table, doctor.FieldID, id),
			sqlgraph.To(degree.Table, degree.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, doctor.DegreeTable, doctor.DegreeColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNametitle queries the nametitle edge of a Doctor.
func (c *DoctorClient) QueryNametitle(d *Doctor) *NametitleQuery {
	query := &NametitleQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(doctor.Table, doctor.FieldID, id),
			sqlgraph.To(nametitle.Table, nametitle.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, doctor.NametitleTable, doctor.NametitleColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DoctorClient) Hooks() []Hook {
	return c.hooks.Doctor
}

// NametitleClient is a client for the Nametitle schema.
type NametitleClient struct {
	config
}

// NewNametitleClient returns a client for the Nametitle from the given config.
func NewNametitleClient(c config) *NametitleClient {
	return &NametitleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `nametitle.Hooks(f(g(h())))`.
func (c *NametitleClient) Use(hooks ...Hook) {
	c.hooks.Nametitle = append(c.hooks.Nametitle, hooks...)
}

// Create returns a create builder for Nametitle.
func (c *NametitleClient) Create() *NametitleCreate {
	mutation := newNametitleMutation(c.config, OpCreate)
	return &NametitleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Nametitle.
func (c *NametitleClient) Update() *NametitleUpdate {
	mutation := newNametitleMutation(c.config, OpUpdate)
	return &NametitleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NametitleClient) UpdateOne(n *Nametitle) *NametitleUpdateOne {
	mutation := newNametitleMutation(c.config, OpUpdateOne, withNametitle(n))
	return &NametitleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NametitleClient) UpdateOneID(id int) *NametitleUpdateOne {
	mutation := newNametitleMutation(c.config, OpUpdateOne, withNametitleID(id))
	return &NametitleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Nametitle.
func (c *NametitleClient) Delete() *NametitleDelete {
	mutation := newNametitleMutation(c.config, OpDelete)
	return &NametitleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *NametitleClient) DeleteOne(n *Nametitle) *NametitleDeleteOne {
	return c.DeleteOneID(n.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *NametitleClient) DeleteOneID(id int) *NametitleDeleteOne {
	builder := c.Delete().Where(nametitle.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NametitleDeleteOne{builder}
}

// Create returns a query builder for Nametitle.
func (c *NametitleClient) Query() *NametitleQuery {
	return &NametitleQuery{config: c.config}
}

// Get returns a Nametitle entity by its id.
func (c *NametitleClient) Get(ctx context.Context, id int) (*Nametitle, error) {
	return c.Query().Where(nametitle.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NametitleClient) GetX(ctx context.Context, id int) *Nametitle {
	n, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return n
}

// QueryDoctor queries the doctor edge of a Nametitle.
func (c *NametitleClient) QueryDoctor(n *Nametitle) *DoctorQuery {
	query := &DoctorQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(nametitle.Table, nametitle.FieldID, id),
			sqlgraph.To(doctor.Table, doctor.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, nametitle.DoctorTable, nametitle.DoctorColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NametitleClient) Hooks() []Hook {
	return c.hooks.Nametitle
}
