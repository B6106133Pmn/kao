// Code generated by entc, DO NOT EDIT.

package doctor

const (
	// Label holds the string label denoting the doctor type in the database.
	Label = "doctor"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldTel holds the string denoting the tel field in the database.
	FieldTel = "tel"

	// EdgeDepartment holds the string denoting the department edge name in mutations.
	EdgeDepartment = "department"
	// EdgeDegree holds the string denoting the degree edge name in mutations.
	EdgeDegree = "degree"
	// EdgeNametitle holds the string denoting the nametitle edge name in mutations.
	EdgeNametitle = "nametitle"

	// Table holds the table name of the doctor in the database.
	Table = "doctors"
	// DepartmentTable is the table the holds the department relation/edge.
	DepartmentTable = "doctors"
	// DepartmentInverseTable is the table name for the Department entity.
	// It exists in this package in order to avoid circular dependency with the "department" package.
	DepartmentInverseTable = "departments"
	// DepartmentColumn is the table column denoting the department relation/edge.
	DepartmentColumn = "department_id"
	// DegreeTable is the table the holds the degree relation/edge.
	DegreeTable = "doctors"
	// DegreeInverseTable is the table name for the Degree entity.
	// It exists in this package in order to avoid circular dependency with the "degree" package.
	DegreeInverseTable = "degrees"
	// DegreeColumn is the table column denoting the degree relation/edge.
	DegreeColumn = "degree_id"
	// NametitleTable is the table the holds the nametitle relation/edge.
	NametitleTable = "doctors"
	// NametitleInverseTable is the table name for the Nametitle entity.
	// It exists in this package in order to avoid circular dependency with the "nametitle" package.
	NametitleInverseTable = "nametitles"
	// NametitleColumn is the table column denoting the nametitle relation/edge.
	NametitleColumn = "doctor_id"
)

// Columns holds all SQL columns for doctor fields.
var Columns = []string{
	FieldID,
	FieldEmail,
	FieldPassword,
	FieldName,
	FieldTel,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the Doctor type.
var ForeignKeys = []string{
	"degree_id",
	"department_id",
	"doctor_id",
}

var (
	// EmailValidator is a validator for the "Email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// PasswordValidator is a validator for the "Password" field. It is called by the builders before save.
	PasswordValidator func(string) error
	// NameValidator is a validator for the "Name" field. It is called by the builders before save.
	NameValidator func(string) error
	// TelValidator is a validator for the "Tel" field. It is called by the builders before save.
	TelValidator func(string) error
)
