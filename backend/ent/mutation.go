// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"

	"github.com/pmn-kao/app/ent/degree"
	"github.com/pmn-kao/app/ent/department"
	"github.com/pmn-kao/app/ent/doctor"
	"github.com/pmn-kao/app/ent/nametitle"

	"github.com/facebookincubator/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDegree     = "Degree"
	TypeDepartment = "Department"
	TypeDoctor     = "Doctor"
	TypeNametitle  = "Nametitle"
)

// DegreeMutation represents an operation that mutate the Degrees
// nodes in the graph.
type DegreeMutation struct {
	config
	op            Op
	typ           string
	id            *int
	_Degree       *string
	clearedFields map[string]struct{}
	doctor        map[int]struct{}
	removeddoctor map[int]struct{}
	done          bool
	oldValue      func(context.Context) (*Degree, error)
}

var _ ent.Mutation = (*DegreeMutation)(nil)

// degreeOption allows to manage the mutation configuration using functional options.
type degreeOption func(*DegreeMutation)

// newDegreeMutation creates new mutation for $n.Name.
func newDegreeMutation(c config, op Op, opts ...degreeOption) *DegreeMutation {
	m := &DegreeMutation{
		config:        c,
		op:            op,
		typ:           TypeDegree,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDegreeID sets the id field of the mutation.
func withDegreeID(id int) degreeOption {
	return func(m *DegreeMutation) {
		var (
			err   error
			once  sync.Once
			value *Degree
		)
		m.oldValue = func(ctx context.Context) (*Degree, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Degree.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDegree sets the old Degree of the mutation.
func withDegree(node *Degree) degreeOption {
	return func(m *DegreeMutation) {
		m.oldValue = func(context.Context) (*Degree, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DegreeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DegreeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *DegreeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetDegree sets the Degree field.
func (m *DegreeMutation) SetDegree(s string) {
	m._Degree = &s
}

// Degree returns the Degree value in the mutation.
func (m *DegreeMutation) Degree() (r string, exists bool) {
	v := m._Degree
	if v == nil {
		return
	}
	return *v, true
}

// OldDegree returns the old Degree value of the Degree.
// If the Degree object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DegreeMutation) OldDegree(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDegree is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDegree requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDegree: %w", err)
	}
	return oldValue.Degree, nil
}

// ResetDegree reset all changes of the "Degree" field.
func (m *DegreeMutation) ResetDegree() {
	m._Degree = nil
}

// AddDoctorIDs adds the doctor edge to Doctor by ids.
func (m *DegreeMutation) AddDoctorIDs(ids ...int) {
	if m.doctor == nil {
		m.doctor = make(map[int]struct{})
	}
	for i := range ids {
		m.doctor[ids[i]] = struct{}{}
	}
}

// RemoveDoctorIDs removes the doctor edge to Doctor by ids.
func (m *DegreeMutation) RemoveDoctorIDs(ids ...int) {
	if m.removeddoctor == nil {
		m.removeddoctor = make(map[int]struct{})
	}
	for i := range ids {
		m.removeddoctor[ids[i]] = struct{}{}
	}
}

// RemovedDoctor returns the removed ids of doctor.
func (m *DegreeMutation) RemovedDoctorIDs() (ids []int) {
	for id := range m.removeddoctor {
		ids = append(ids, id)
	}
	return
}

// DoctorIDs returns the doctor ids in the mutation.
func (m *DegreeMutation) DoctorIDs() (ids []int) {
	for id := range m.doctor {
		ids = append(ids, id)
	}
	return
}

// ResetDoctor reset all changes of the "doctor" edge.
func (m *DegreeMutation) ResetDoctor() {
	m.doctor = nil
	m.removeddoctor = nil
}

// Op returns the operation name.
func (m *DegreeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Degree).
func (m *DegreeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *DegreeMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Degree != nil {
		fields = append(fields, degree.FieldDegree)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *DegreeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case degree.FieldDegree:
		return m.Degree()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *DegreeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case degree.FieldDegree:
		return m.OldDegree(ctx)
	}
	return nil, fmt.Errorf("unknown Degree field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DegreeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case degree.FieldDegree:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDegree(v)
		return nil
	}
	return fmt.Errorf("unknown Degree field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *DegreeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *DegreeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DegreeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Degree numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *DegreeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *DegreeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *DegreeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Degree nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *DegreeMutation) ResetField(name string) error {
	switch name {
	case degree.FieldDegree:
		m.ResetDegree()
		return nil
	}
	return fmt.Errorf("unknown Degree field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *DegreeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.doctor != nil {
		edges = append(edges, degree.EdgeDoctor)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *DegreeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case degree.EdgeDoctor:
		ids := make([]ent.Value, 0, len(m.doctor))
		for id := range m.doctor {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *DegreeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removeddoctor != nil {
		edges = append(edges, degree.EdgeDoctor)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *DegreeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case degree.EdgeDoctor:
		ids := make([]ent.Value, 0, len(m.removeddoctor))
		for id := range m.removeddoctor {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *DegreeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *DegreeMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *DegreeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Degree unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *DegreeMutation) ResetEdge(name string) error {
	switch name {
	case degree.EdgeDoctor:
		m.ResetDoctor()
		return nil
	}
	return fmt.Errorf("unknown Degree edge %s", name)
}

// DepartmentMutation represents an operation that mutate the Departments
// nodes in the graph.
type DepartmentMutation struct {
	config
	op            Op
	typ           string
	id            *int
	_Department   *string
	clearedFields map[string]struct{}
	doctor        map[int]struct{}
	removeddoctor map[int]struct{}
	done          bool
	oldValue      func(context.Context) (*Department, error)
}

var _ ent.Mutation = (*DepartmentMutation)(nil)

// departmentOption allows to manage the mutation configuration using functional options.
type departmentOption func(*DepartmentMutation)

// newDepartmentMutation creates new mutation for $n.Name.
func newDepartmentMutation(c config, op Op, opts ...departmentOption) *DepartmentMutation {
	m := &DepartmentMutation{
		config:        c,
		op:            op,
		typ:           TypeDepartment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDepartmentID sets the id field of the mutation.
func withDepartmentID(id int) departmentOption {
	return func(m *DepartmentMutation) {
		var (
			err   error
			once  sync.Once
			value *Department
		)
		m.oldValue = func(ctx context.Context) (*Department, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Department.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDepartment sets the old Department of the mutation.
func withDepartment(node *Department) departmentOption {
	return func(m *DepartmentMutation) {
		m.oldValue = func(context.Context) (*Department, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DepartmentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DepartmentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *DepartmentMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetDepartment sets the Department field.
func (m *DepartmentMutation) SetDepartment(s string) {
	m._Department = &s
}

// Department returns the Department value in the mutation.
func (m *DepartmentMutation) Department() (r string, exists bool) {
	v := m._Department
	if v == nil {
		return
	}
	return *v, true
}

// OldDepartment returns the old Department value of the Department.
// If the Department object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DepartmentMutation) OldDepartment(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDepartment is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDepartment requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDepartment: %w", err)
	}
	return oldValue.Department, nil
}

// ResetDepartment reset all changes of the "Department" field.
func (m *DepartmentMutation) ResetDepartment() {
	m._Department = nil
}

// AddDoctorIDs adds the doctor edge to Doctor by ids.
func (m *DepartmentMutation) AddDoctorIDs(ids ...int) {
	if m.doctor == nil {
		m.doctor = make(map[int]struct{})
	}
	for i := range ids {
		m.doctor[ids[i]] = struct{}{}
	}
}

// RemoveDoctorIDs removes the doctor edge to Doctor by ids.
func (m *DepartmentMutation) RemoveDoctorIDs(ids ...int) {
	if m.removeddoctor == nil {
		m.removeddoctor = make(map[int]struct{})
	}
	for i := range ids {
		m.removeddoctor[ids[i]] = struct{}{}
	}
}

// RemovedDoctor returns the removed ids of doctor.
func (m *DepartmentMutation) RemovedDoctorIDs() (ids []int) {
	for id := range m.removeddoctor {
		ids = append(ids, id)
	}
	return
}

// DoctorIDs returns the doctor ids in the mutation.
func (m *DepartmentMutation) DoctorIDs() (ids []int) {
	for id := range m.doctor {
		ids = append(ids, id)
	}
	return
}

// ResetDoctor reset all changes of the "doctor" edge.
func (m *DepartmentMutation) ResetDoctor() {
	m.doctor = nil
	m.removeddoctor = nil
}

// Op returns the operation name.
func (m *DepartmentMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Department).
func (m *DepartmentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *DepartmentMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Department != nil {
		fields = append(fields, department.FieldDepartment)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *DepartmentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case department.FieldDepartment:
		return m.Department()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *DepartmentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case department.FieldDepartment:
		return m.OldDepartment(ctx)
	}
	return nil, fmt.Errorf("unknown Department field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DepartmentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case department.FieldDepartment:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDepartment(v)
		return nil
	}
	return fmt.Errorf("unknown Department field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *DepartmentMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *DepartmentMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DepartmentMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Department numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *DepartmentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *DepartmentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *DepartmentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Department nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *DepartmentMutation) ResetField(name string) error {
	switch name {
	case department.FieldDepartment:
		m.ResetDepartment()
		return nil
	}
	return fmt.Errorf("unknown Department field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *DepartmentMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.doctor != nil {
		edges = append(edges, department.EdgeDoctor)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *DepartmentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case department.EdgeDoctor:
		ids := make([]ent.Value, 0, len(m.doctor))
		for id := range m.doctor {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *DepartmentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removeddoctor != nil {
		edges = append(edges, department.EdgeDoctor)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *DepartmentMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case department.EdgeDoctor:
		ids := make([]ent.Value, 0, len(m.removeddoctor))
		for id := range m.removeddoctor {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *DepartmentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *DepartmentMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *DepartmentMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Department unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *DepartmentMutation) ResetEdge(name string) error {
	switch name {
	case department.EdgeDoctor:
		m.ResetDoctor()
		return nil
	}
	return fmt.Errorf("unknown Department edge %s", name)
}

// DoctorMutation represents an operation that mutate the Doctors
// nodes in the graph.
type DoctorMutation struct {
	config
	op                Op
	typ               string
	id                *int
	_Email            *string
	_Password         *string
	_Name             *string
	_Tel              *string
	clearedFields     map[string]struct{}
	department        *int
	cleareddepartment bool
	degree            *int
	cleareddegree     bool
	nametitle         *int
	clearednametitle  bool
	done              bool
	oldValue          func(context.Context) (*Doctor, error)
}

var _ ent.Mutation = (*DoctorMutation)(nil)

// doctorOption allows to manage the mutation configuration using functional options.
type doctorOption func(*DoctorMutation)

// newDoctorMutation creates new mutation for $n.Name.
func newDoctorMutation(c config, op Op, opts ...doctorOption) *DoctorMutation {
	m := &DoctorMutation{
		config:        c,
		op:            op,
		typ:           TypeDoctor,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDoctorID sets the id field of the mutation.
func withDoctorID(id int) doctorOption {
	return func(m *DoctorMutation) {
		var (
			err   error
			once  sync.Once
			value *Doctor
		)
		m.oldValue = func(ctx context.Context) (*Doctor, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Doctor.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDoctor sets the old Doctor of the mutation.
func withDoctor(node *Doctor) doctorOption {
	return func(m *DoctorMutation) {
		m.oldValue = func(context.Context) (*Doctor, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DoctorMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DoctorMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *DoctorMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetEmail sets the Email field.
func (m *DoctorMutation) SetEmail(s string) {
	m._Email = &s
}

// Email returns the Email value in the mutation.
func (m *DoctorMutation) Email() (r string, exists bool) {
	v := m._Email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old Email value of the Doctor.
// If the Doctor object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DoctorMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEmail is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail reset all changes of the "Email" field.
func (m *DoctorMutation) ResetEmail() {
	m._Email = nil
}

// SetPassword sets the Password field.
func (m *DoctorMutation) SetPassword(s string) {
	m._Password = &s
}

// Password returns the Password value in the mutation.
func (m *DoctorMutation) Password() (r string, exists bool) {
	v := m._Password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old Password value of the Doctor.
// If the Doctor object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DoctorMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPassword is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword reset all changes of the "Password" field.
func (m *DoctorMutation) ResetPassword() {
	m._Password = nil
}

// SetName sets the Name field.
func (m *DoctorMutation) SetName(s string) {
	m._Name = &s
}

// Name returns the Name value in the mutation.
func (m *DoctorMutation) Name() (r string, exists bool) {
	v := m._Name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old Name value of the Doctor.
// If the Doctor object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DoctorMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "Name" field.
func (m *DoctorMutation) ResetName() {
	m._Name = nil
}

// SetTel sets the Tel field.
func (m *DoctorMutation) SetTel(s string) {
	m._Tel = &s
}

// Tel returns the Tel value in the mutation.
func (m *DoctorMutation) Tel() (r string, exists bool) {
	v := m._Tel
	if v == nil {
		return
	}
	return *v, true
}

// OldTel returns the old Tel value of the Doctor.
// If the Doctor object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DoctorMutation) OldTel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTel is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTel: %w", err)
	}
	return oldValue.Tel, nil
}

// ResetTel reset all changes of the "Tel" field.
func (m *DoctorMutation) ResetTel() {
	m._Tel = nil
}

// SetDepartmentID sets the department edge to Department by id.
func (m *DoctorMutation) SetDepartmentID(id int) {
	m.department = &id
}

// ClearDepartment clears the department edge to Department.
func (m *DoctorMutation) ClearDepartment() {
	m.cleareddepartment = true
}

// DepartmentCleared returns if the edge department was cleared.
func (m *DoctorMutation) DepartmentCleared() bool {
	return m.cleareddepartment
}

// DepartmentID returns the department id in the mutation.
func (m *DoctorMutation) DepartmentID() (id int, exists bool) {
	if m.department != nil {
		return *m.department, true
	}
	return
}

// DepartmentIDs returns the department ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// DepartmentID instead. It exists only for internal usage by the builders.
func (m *DoctorMutation) DepartmentIDs() (ids []int) {
	if id := m.department; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDepartment reset all changes of the "department" edge.
func (m *DoctorMutation) ResetDepartment() {
	m.department = nil
	m.cleareddepartment = false
}

// SetDegreeID sets the degree edge to Degree by id.
func (m *DoctorMutation) SetDegreeID(id int) {
	m.degree = &id
}

// ClearDegree clears the degree edge to Degree.
func (m *DoctorMutation) ClearDegree() {
	m.cleareddegree = true
}

// DegreeCleared returns if the edge degree was cleared.
func (m *DoctorMutation) DegreeCleared() bool {
	return m.cleareddegree
}

// DegreeID returns the degree id in the mutation.
func (m *DoctorMutation) DegreeID() (id int, exists bool) {
	if m.degree != nil {
		return *m.degree, true
	}
	return
}

// DegreeIDs returns the degree ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// DegreeID instead. It exists only for internal usage by the builders.
func (m *DoctorMutation) DegreeIDs() (ids []int) {
	if id := m.degree; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDegree reset all changes of the "degree" edge.
func (m *DoctorMutation) ResetDegree() {
	m.degree = nil
	m.cleareddegree = false
}

// SetNametitleID sets the nametitle edge to Nametitle by id.
func (m *DoctorMutation) SetNametitleID(id int) {
	m.nametitle = &id
}

// ClearNametitle clears the nametitle edge to Nametitle.
func (m *DoctorMutation) ClearNametitle() {
	m.clearednametitle = true
}

// NametitleCleared returns if the edge nametitle was cleared.
func (m *DoctorMutation) NametitleCleared() bool {
	return m.clearednametitle
}

// NametitleID returns the nametitle id in the mutation.
func (m *DoctorMutation) NametitleID() (id int, exists bool) {
	if m.nametitle != nil {
		return *m.nametitle, true
	}
	return
}

// NametitleIDs returns the nametitle ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// NametitleID instead. It exists only for internal usage by the builders.
func (m *DoctorMutation) NametitleIDs() (ids []int) {
	if id := m.nametitle; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetNametitle reset all changes of the "nametitle" edge.
func (m *DoctorMutation) ResetNametitle() {
	m.nametitle = nil
	m.clearednametitle = false
}

// Op returns the operation name.
func (m *DoctorMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Doctor).
func (m *DoctorMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *DoctorMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m._Email != nil {
		fields = append(fields, doctor.FieldEmail)
	}
	if m._Password != nil {
		fields = append(fields, doctor.FieldPassword)
	}
	if m._Name != nil {
		fields = append(fields, doctor.FieldName)
	}
	if m._Tel != nil {
		fields = append(fields, doctor.FieldTel)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *DoctorMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case doctor.FieldEmail:
		return m.Email()
	case doctor.FieldPassword:
		return m.Password()
	case doctor.FieldName:
		return m.Name()
	case doctor.FieldTel:
		return m.Tel()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *DoctorMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case doctor.FieldEmail:
		return m.OldEmail(ctx)
	case doctor.FieldPassword:
		return m.OldPassword(ctx)
	case doctor.FieldName:
		return m.OldName(ctx)
	case doctor.FieldTel:
		return m.OldTel(ctx)
	}
	return nil, fmt.Errorf("unknown Doctor field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DoctorMutation) SetField(name string, value ent.Value) error {
	switch name {
	case doctor.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case doctor.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case doctor.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case doctor.FieldTel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTel(v)
		return nil
	}
	return fmt.Errorf("unknown Doctor field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *DoctorMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *DoctorMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DoctorMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Doctor numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *DoctorMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *DoctorMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *DoctorMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Doctor nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *DoctorMutation) ResetField(name string) error {
	switch name {
	case doctor.FieldEmail:
		m.ResetEmail()
		return nil
	case doctor.FieldPassword:
		m.ResetPassword()
		return nil
	case doctor.FieldName:
		m.ResetName()
		return nil
	case doctor.FieldTel:
		m.ResetTel()
		return nil
	}
	return fmt.Errorf("unknown Doctor field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *DoctorMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.department != nil {
		edges = append(edges, doctor.EdgeDepartment)
	}
	if m.degree != nil {
		edges = append(edges, doctor.EdgeDegree)
	}
	if m.nametitle != nil {
		edges = append(edges, doctor.EdgeNametitle)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *DoctorMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case doctor.EdgeDepartment:
		if id := m.department; id != nil {
			return []ent.Value{*id}
		}
	case doctor.EdgeDegree:
		if id := m.degree; id != nil {
			return []ent.Value{*id}
		}
	case doctor.EdgeNametitle:
		if id := m.nametitle; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *DoctorMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *DoctorMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *DoctorMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleareddepartment {
		edges = append(edges, doctor.EdgeDepartment)
	}
	if m.cleareddegree {
		edges = append(edges, doctor.EdgeDegree)
	}
	if m.clearednametitle {
		edges = append(edges, doctor.EdgeNametitle)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *DoctorMutation) EdgeCleared(name string) bool {
	switch name {
	case doctor.EdgeDepartment:
		return m.cleareddepartment
	case doctor.EdgeDegree:
		return m.cleareddegree
	case doctor.EdgeNametitle:
		return m.clearednametitle
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *DoctorMutation) ClearEdge(name string) error {
	switch name {
	case doctor.EdgeDepartment:
		m.ClearDepartment()
		return nil
	case doctor.EdgeDegree:
		m.ClearDegree()
		return nil
	case doctor.EdgeNametitle:
		m.ClearNametitle()
		return nil
	}
	return fmt.Errorf("unknown Doctor unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *DoctorMutation) ResetEdge(name string) error {
	switch name {
	case doctor.EdgeDepartment:
		m.ResetDepartment()
		return nil
	case doctor.EdgeDegree:
		m.ResetDegree()
		return nil
	case doctor.EdgeNametitle:
		m.ResetNametitle()
		return nil
	}
	return fmt.Errorf("unknown Doctor edge %s", name)
}

// NametitleMutation represents an operation that mutate the Nametitles
// nodes in the graph.
type NametitleMutation struct {
	config
	op            Op
	typ           string
	id            *int
	_NameTitle    *string
	clearedFields map[string]struct{}
	doctor        map[int]struct{}
	removeddoctor map[int]struct{}
	done          bool
	oldValue      func(context.Context) (*Nametitle, error)
}

var _ ent.Mutation = (*NametitleMutation)(nil)

// nametitleOption allows to manage the mutation configuration using functional options.
type nametitleOption func(*NametitleMutation)

// newNametitleMutation creates new mutation for $n.Name.
func newNametitleMutation(c config, op Op, opts ...nametitleOption) *NametitleMutation {
	m := &NametitleMutation{
		config:        c,
		op:            op,
		typ:           TypeNametitle,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNametitleID sets the id field of the mutation.
func withNametitleID(id int) nametitleOption {
	return func(m *NametitleMutation) {
		var (
			err   error
			once  sync.Once
			value *Nametitle
		)
		m.oldValue = func(ctx context.Context) (*Nametitle, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Nametitle.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withNametitle sets the old Nametitle of the mutation.
func withNametitle(node *Nametitle) nametitleOption {
	return func(m *NametitleMutation) {
		m.oldValue = func(context.Context) (*Nametitle, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NametitleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NametitleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *NametitleMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetNameTitle sets the NameTitle field.
func (m *NametitleMutation) SetNameTitle(s string) {
	m._NameTitle = &s
}

// NameTitle returns the NameTitle value in the mutation.
func (m *NametitleMutation) NameTitle() (r string, exists bool) {
	v := m._NameTitle
	if v == nil {
		return
	}
	return *v, true
}

// OldNameTitle returns the old NameTitle value of the Nametitle.
// If the Nametitle object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *NametitleMutation) OldNameTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldNameTitle is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldNameTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNameTitle: %w", err)
	}
	return oldValue.NameTitle, nil
}

// ResetNameTitle reset all changes of the "NameTitle" field.
func (m *NametitleMutation) ResetNameTitle() {
	m._NameTitle = nil
}

// AddDoctorIDs adds the doctor edge to Doctor by ids.
func (m *NametitleMutation) AddDoctorIDs(ids ...int) {
	if m.doctor == nil {
		m.doctor = make(map[int]struct{})
	}
	for i := range ids {
		m.doctor[ids[i]] = struct{}{}
	}
}

// RemoveDoctorIDs removes the doctor edge to Doctor by ids.
func (m *NametitleMutation) RemoveDoctorIDs(ids ...int) {
	if m.removeddoctor == nil {
		m.removeddoctor = make(map[int]struct{})
	}
	for i := range ids {
		m.removeddoctor[ids[i]] = struct{}{}
	}
}

// RemovedDoctor returns the removed ids of doctor.
func (m *NametitleMutation) RemovedDoctorIDs() (ids []int) {
	for id := range m.removeddoctor {
		ids = append(ids, id)
	}
	return
}

// DoctorIDs returns the doctor ids in the mutation.
func (m *NametitleMutation) DoctorIDs() (ids []int) {
	for id := range m.doctor {
		ids = append(ids, id)
	}
	return
}

// ResetDoctor reset all changes of the "doctor" edge.
func (m *NametitleMutation) ResetDoctor() {
	m.doctor = nil
	m.removeddoctor = nil
}

// Op returns the operation name.
func (m *NametitleMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Nametitle).
func (m *NametitleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *NametitleMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._NameTitle != nil {
		fields = append(fields, nametitle.FieldNameTitle)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *NametitleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case nametitle.FieldNameTitle:
		return m.NameTitle()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *NametitleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case nametitle.FieldNameTitle:
		return m.OldNameTitle(ctx)
	}
	return nil, fmt.Errorf("unknown Nametitle field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *NametitleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case nametitle.FieldNameTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNameTitle(v)
		return nil
	}
	return fmt.Errorf("unknown Nametitle field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *NametitleMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *NametitleMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *NametitleMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Nametitle numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *NametitleMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *NametitleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *NametitleMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Nametitle nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *NametitleMutation) ResetField(name string) error {
	switch name {
	case nametitle.FieldNameTitle:
		m.ResetNameTitle()
		return nil
	}
	return fmt.Errorf("unknown Nametitle field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *NametitleMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.doctor != nil {
		edges = append(edges, nametitle.EdgeDoctor)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *NametitleMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case nametitle.EdgeDoctor:
		ids := make([]ent.Value, 0, len(m.doctor))
		for id := range m.doctor {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *NametitleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removeddoctor != nil {
		edges = append(edges, nametitle.EdgeDoctor)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *NametitleMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case nametitle.EdgeDoctor:
		ids := make([]ent.Value, 0, len(m.removeddoctor))
		for id := range m.removeddoctor {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *NametitleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *NametitleMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *NametitleMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Nametitle unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *NametitleMutation) ResetEdge(name string) error {
	switch name {
	case nametitle.EdgeDoctor:
		m.ResetDoctor()
		return nil
	}
	return fmt.Errorf("unknown Nametitle edge %s", name)
}
