/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API Doctor
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ControllersDoctor,
    ControllersDoctorFromJSON,
    ControllersDoctorToJSON,
    EntDegree,
    EntDegreeFromJSON,
    EntDegreeToJSON,
    EntDepartment,
    EntDepartmentFromJSON,
    EntDepartmentToJSON,
    EntDoctor,
    EntDoctorFromJSON,
    EntDoctorToJSON,
    EntNametitle,
    EntNametitleFromJSON,
    EntNametitleToJSON,
} from '../models';

export interface CreateDegreeRequest {
    degree: EntDegree;
}

export interface CreateDepartmentRequest {
    department: EntDepartment;
}

export interface CreateDoctorRequest {
    doctor: ControllersDoctor;
}

export interface CreateNametitleRequest {
    nametitle: EntNametitle;
}

export interface DeleteDepartmentRequest {
    id: number;
}

export interface DeleteDoctorRequest {
    id: number;
}

export interface DeleteNametitleRequest {
    id: number;
}

export interface GetDegreeRequest {
    id: number;
}

export interface GetDoctorRequest {
    id: number;
}

export interface GetNametitleRequest {
    id: number;
}

export interface ListDegreeRequest {
    limit?: number;
    offset?: number;
}

export interface ListDepartmentRequest {
    limit?: number;
    offset?: number;
}

export interface ListDoctorRequest {
    limit?: number;
    offset?: number;
}

export interface ListNametitleRequest {
    limit?: number;
    offset?: number;
}

export interface UpdateDepartmentRequest {
    id: number;
    department: EntDepartment;
}

export interface UpdateDoctorRequest {
    id: number;
    doctor: EntDoctor;
}

export interface UpdateNametitleRequest {
    id: number;
    nametitle: EntNametitle;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create degree
     * Create degree
     */
    async createDegreeRaw(requestParameters: CreateDegreeRequest): Promise<runtime.ApiResponse<EntDegree>> {
        if (requestParameters.degree === null || requestParameters.degree === undefined) {
            throw new runtime.RequiredError('degree','Required parameter requestParameters.degree was null or undefined when calling createDegree.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/degrees`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntDegreeToJSON(requestParameters.degree),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDegreeFromJSON(jsonValue));
    }

    /**
     * Create degree
     * Create degree
     */
    async createDegree(requestParameters: CreateDegreeRequest): Promise<EntDegree> {
        const response = await this.createDegreeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create department
     * Create department
     */
    async createDepartmentRaw(requestParameters: CreateDepartmentRequest): Promise<runtime.ApiResponse<EntDepartment>> {
        if (requestParameters.department === null || requestParameters.department === undefined) {
            throw new runtime.RequiredError('department','Required parameter requestParameters.department was null or undefined when calling createDepartment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/departments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntDepartmentToJSON(requestParameters.department),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDepartmentFromJSON(jsonValue));
    }

    /**
     * Create department
     * Create department
     */
    async createDepartment(requestParameters: CreateDepartmentRequest): Promise<EntDepartment> {
        const response = await this.createDepartmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create doctor
     * Create doctor
     */
    async createDoctorRaw(requestParameters: CreateDoctorRequest): Promise<runtime.ApiResponse<EntDoctor>> {
        if (requestParameters.doctor === null || requestParameters.doctor === undefined) {
            throw new runtime.RequiredError('doctor','Required parameter requestParameters.doctor was null or undefined when calling createDoctor.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/doctors`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersDoctorToJSON(requestParameters.doctor),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDoctorFromJSON(jsonValue));
    }

    /**
     * Create doctor
     * Create doctor
     */
    async createDoctor(requestParameters: CreateDoctorRequest): Promise<EntDoctor> {
        const response = await this.createDoctorRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create nametitle
     * Create nametitle
     */
    async createNametitleRaw(requestParameters: CreateNametitleRequest): Promise<runtime.ApiResponse<EntNametitle>> {
        if (requestParameters.nametitle === null || requestParameters.nametitle === undefined) {
            throw new runtime.RequiredError('nametitle','Required parameter requestParameters.nametitle was null or undefined when calling createNametitle.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/nametitles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntNametitleToJSON(requestParameters.nametitle),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntNametitleFromJSON(jsonValue));
    }

    /**
     * Create nametitle
     * Create nametitle
     */
    async createNametitle(requestParameters: CreateNametitleRequest): Promise<EntNametitle> {
        const response = await this.createNametitleRaw(requestParameters);
        return await response.value();
    }

    /**
     * get department by ID
     * Delete a department entity by ID
     */
    async deleteDepartmentRaw(requestParameters: DeleteDepartmentRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteDepartment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/departments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get department by ID
     * Delete a department entity by ID
     */
    async deleteDepartment(requestParameters: DeleteDepartmentRequest): Promise<object> {
        const response = await this.deleteDepartmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * get doctor by ID
     * Delete a doctor entity by ID
     */
    async deleteDoctorRaw(requestParameters: DeleteDoctorRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteDoctor.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/doctors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get doctor by ID
     * Delete a doctor entity by ID
     */
    async deleteDoctor(requestParameters: DeleteDoctorRequest): Promise<object> {
        const response = await this.deleteDoctorRaw(requestParameters);
        return await response.value();
    }

    /**
     * get nametitle by ID
     * Delete a nametitle entity by ID
     */
    async deleteNametitleRaw(requestParameters: DeleteNametitleRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteNametitle.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/nametitles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get nametitle by ID
     * Delete a nametitle entity by ID
     */
    async deleteNametitle(requestParameters: DeleteNametitleRequest): Promise<object> {
        const response = await this.deleteNametitleRaw(requestParameters);
        return await response.value();
    }

    /**
     * get degree by ID
     * Get a degree entity by ID
     */
    async getDegreeRaw(requestParameters: GetDegreeRequest): Promise<runtime.ApiResponse<EntDegree>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDegree.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/degrees/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDegreeFromJSON(jsonValue));
    }

    /**
     * get degree by ID
     * Get a degree entity by ID
     */
    async getDegree(requestParameters: GetDegreeRequest): Promise<EntDegree> {
        const response = await this.getDegreeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get doctor by ID
     * Get a doctor entity by ID
     */
    async getDoctorRaw(requestParameters: GetDoctorRequest): Promise<runtime.ApiResponse<EntDoctor>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDoctor.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/departments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDoctorFromJSON(jsonValue));
    }

    /**
     * get doctor by ID
     * Get a doctor entity by ID
     */
    async getDoctor(requestParameters: GetDoctorRequest): Promise<EntDoctor> {
        const response = await this.getDoctorRaw(requestParameters);
        return await response.value();
    }

    /**
     * get nametitle by ID
     * Get a nametitle entity by ID
     */
    async getNametitleRaw(requestParameters: GetNametitleRequest): Promise<runtime.ApiResponse<EntNametitle>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getNametitle.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/nametitles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntNametitleFromJSON(jsonValue));
    }

    /**
     * get nametitle by ID
     * Get a nametitle entity by ID
     */
    async getNametitle(requestParameters: GetNametitleRequest): Promise<EntNametitle> {
        const response = await this.getNametitleRaw(requestParameters);
        return await response.value();
    }

    /**
     * list degree entities
     * List degree entities
     */
    async listDegreeRaw(requestParameters: ListDegreeRequest): Promise<runtime.ApiResponse<Array<EntDegree>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/degrees`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntDegreeFromJSON));
    }

    /**
     * list degree entities
     * List degree entities
     */
    async listDegree(requestParameters: ListDegreeRequest): Promise<Array<EntDegree>> {
        const response = await this.listDegreeRaw(requestParameters);
        return await response.value();
    }

    /**
     * list department entities
     * List department entities
     */
    async listDepartmentRaw(requestParameters: ListDepartmentRequest): Promise<runtime.ApiResponse<Array<EntDepartment>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/departments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntDepartmentFromJSON));
    }

    /**
     * list department entities
     * List department entities
     */
    async listDepartment(requestParameters: ListDepartmentRequest): Promise<Array<EntDepartment>> {
        const response = await this.listDepartmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * list doctor entities
     * List doctor entities
     */
    async listDoctorRaw(requestParameters: ListDoctorRequest): Promise<runtime.ApiResponse<Array<EntDoctor>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/doctors`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntDoctorFromJSON));
    }

    /**
     * list doctor entities
     * List doctor entities
     */
    async listDoctor(requestParameters: ListDoctorRequest): Promise<Array<EntDoctor>> {
        const response = await this.listDoctorRaw(requestParameters);
        return await response.value();
    }

    /**
     * list nametitle entities
     * List nametitle entities
     */
    async listNametitleRaw(requestParameters: ListNametitleRequest): Promise<runtime.ApiResponse<Array<EntNametitle>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/nametitles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntNametitleFromJSON));
    }

    /**
     * list nametitle entities
     * List nametitle entities
     */
    async listNametitle(requestParameters: ListNametitleRequest): Promise<Array<EntNametitle>> {
        const response = await this.listNametitleRaw(requestParameters);
        return await response.value();
    }

    /**
     * update department by ID
     * Update a department entity by ID
     */
    async updateDepartmentRaw(requestParameters: UpdateDepartmentRequest): Promise<runtime.ApiResponse<EntDepartment>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateDepartment.');
        }

        if (requestParameters.department === null || requestParameters.department === undefined) {
            throw new runtime.RequiredError('department','Required parameter requestParameters.department was null or undefined when calling updateDepartment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/departments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntDepartmentToJSON(requestParameters.department),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDepartmentFromJSON(jsonValue));
    }

    /**
     * update department by ID
     * Update a department entity by ID
     */
    async updateDepartment(requestParameters: UpdateDepartmentRequest): Promise<EntDepartment> {
        const response = await this.updateDepartmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * update doctor by ID
     * Update a doctor entity by ID
     */
    async updateDoctorRaw(requestParameters: UpdateDoctorRequest): Promise<runtime.ApiResponse<EntDoctor>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateDoctor.');
        }

        if (requestParameters.doctor === null || requestParameters.doctor === undefined) {
            throw new runtime.RequiredError('doctor','Required parameter requestParameters.doctor was null or undefined when calling updateDoctor.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/doctors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntDoctorToJSON(requestParameters.doctor),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDoctorFromJSON(jsonValue));
    }

    /**
     * update doctor by ID
     * Update a doctor entity by ID
     */
    async updateDoctor(requestParameters: UpdateDoctorRequest): Promise<EntDoctor> {
        const response = await this.updateDoctorRaw(requestParameters);
        return await response.value();
    }

    /**
     * update nametitle by ID
     * Update a nametitle entity by ID
     */
    async updateNametitleRaw(requestParameters: UpdateNametitleRequest): Promise<runtime.ApiResponse<EntNametitle>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateNametitle.');
        }

        if (requestParameters.nametitle === null || requestParameters.nametitle === undefined) {
            throw new runtime.RequiredError('nametitle','Required parameter requestParameters.nametitle was null or undefined when calling updateNametitle.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/nametitles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntNametitleToJSON(requestParameters.nametitle),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntNametitleFromJSON(jsonValue));
    }

    /**
     * update nametitle by ID
     * Update a nametitle entity by ID
     */
    async updateNametitle(requestParameters: UpdateNametitleRequest): Promise<EntNametitle> {
        const response = await this.updateNametitleRaw(requestParameters);
        return await response.value();
    }

}
